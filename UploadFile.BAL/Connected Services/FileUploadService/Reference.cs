//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UploadFile.BAL.FileUploadService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileUploadService.IUploadFileService")]
    public interface IUploadFileService {
        
        // CODEGEN: Generating message contract since the wrapper name (UploadFileModel) of message UploadFileModel does not match the default value (UploadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadFileService/UploadFile", ReplyAction="http://tempuri.org/IUploadFileService/UploadFileResponse")]
        UploadFile.BAL.FileUploadService.UploadResponse UploadFile(UploadFile.BAL.FileUploadService.UploadFileModel request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUploadFileService/UploadFile", ReplyAction="http://tempuri.org/IUploadFileService/UploadFileResponse")]
        System.Threading.Tasks.Task<UploadFile.BAL.FileUploadService.UploadResponse> UploadFileAsync(UploadFile.BAL.FileUploadService.UploadFileModel request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadFileModel", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadFileModel {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream stream;
        
        public UploadFileModel() {
        }
        
        public UploadFileModel(string FileName, System.IO.Stream stream) {
            this.FileName = FileName;
            this.stream = stream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UploadResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UploadResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool UploadSucceeded;
        
        public UploadResponse() {
        }
        
        public UploadResponse(bool UploadSucceeded) {
            this.UploadSucceeded = UploadSucceeded;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUploadFileServiceChannel : UploadFile.BAL.FileUploadService.IUploadFileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadFileServiceClient : System.ServiceModel.ClientBase<UploadFile.BAL.FileUploadService.IUploadFileService>, UploadFile.BAL.FileUploadService.IUploadFileService {
        
        public UploadFileServiceClient() {
        }
        
        public UploadFileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UploadFileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadFileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UploadFileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        UploadFile.BAL.FileUploadService.UploadResponse UploadFile.BAL.FileUploadService.IUploadFileService.UploadFile(UploadFile.BAL.FileUploadService.UploadFileModel request) {
            return base.Channel.UploadFile(request);
        }
        
        public bool UploadFile(string FileName, System.IO.Stream stream) {
            UploadFile.BAL.FileUploadService.UploadFileModel inValue = new UploadFile.BAL.FileUploadService.UploadFileModel();
            inValue.FileName = FileName;
            inValue.stream = stream;
            UploadFile.BAL.FileUploadService.UploadResponse retVal = ((UploadFile.BAL.FileUploadService.IUploadFileService)(this)).UploadFile(inValue);
            return retVal.UploadSucceeded;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<UploadFile.BAL.FileUploadService.UploadResponse> UploadFile.BAL.FileUploadService.IUploadFileService.UploadFileAsync(UploadFile.BAL.FileUploadService.UploadFileModel request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<UploadFile.BAL.FileUploadService.UploadResponse> UploadFileAsync(string FileName, System.IO.Stream stream) {
            UploadFile.BAL.FileUploadService.UploadFileModel inValue = new UploadFile.BAL.FileUploadService.UploadFileModel();
            inValue.FileName = FileName;
            inValue.stream = stream;
            return ((UploadFile.BAL.FileUploadService.IUploadFileService)(this)).UploadFileAsync(inValue);
        }
    }
}
